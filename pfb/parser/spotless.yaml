inputs:
  _include:
    - (pfb.parser)gridding.yml
    - (pfb.parser)pdopts.yml
    - (pfb.parser)pmopts.yml
    - (pfb.parser)cgopts.yml
    - (pfb.parser)dist.yml
  nband:
    dtype: int
    required: true
    abbreviation: nb
    info:
      Number of imaging bands
  output_filename:
    dtype: str
    required: true
    abbreviation: o
    info:
      Basename of output
  postfix:
    dtype: str
    default: ''
    info:
      Can be used to specify a custom name for the image space data products
  product:
    dtype: str
    abbreviation: p
    default: I
    info:
      Imaging products to produce. Options are I, Q, U, V.
      Only single Stokes products are currently supported
  mask:
    dtype: str
    abbreviation: mask
    info:
      Path to mask.fits
  sigmainv:
    dtype: float
    default: 1e-5
    abbreviation: sinv
    info:
      Standard deviation of assumed GRF prior
  bases:
    dtype: str
    info: 'Wavelet bases to use. Give as comma separated str eg. '
    default: 'self,db1,db2'
    abbreviation: bases
  nlevels:
    dtype: int
    info: 'Wavelet decomposition level'
    default: 3
    abbreviation: nlevels
  l1reweight_from:
    dtype: int
    default: 5
    info:
      Start doing l1reweights after this many iterations
  hessnorm:
    dtype: float
    abbreviation: hessnorm
    info:
      Spectral norm of hessian approximation
  sigma21:
    dtype: float
    abbreviation: sig21
    info:
      Thresholding level
  rmsfactor:
    dtype: float
    default: 3.0
    info:
      By default will threshold by rmsfactor*rms at every iteration
  gamma:
    dtype: float
    default: 1.0
    info:
      Step size of update
  positivity:
    dtype: bool
    default: True
    info:
      Apply positivity constraint
  niter:
    dtype: int
    default: 5
    abbreviation: niter
    info:
      Number of iterations.
      L21 reweighting will take place after every iteration
  tol:
    dtype: float
    default: 1e-3
    info:
      Tolerance at which to terminate algorithm.
      Will stop when norm(x-xp)/norm(x) < tol
  fits_mfs:
    dtype: bool
    default: true
    info:
      Output MFS fits files
  fits_cubes:
    dtype: bool
    default: false
    info:
      Output fits cubes
  memory_greedy:
    dtype: bool
    default: false
    info:
      Holds data in memory if set
  inverter:
    dtype: str
    default: pcg
    choices:
      - pcg
      - pd
    info:
      Which algorithm to use for inverting Hessian

outputs:
  {}
